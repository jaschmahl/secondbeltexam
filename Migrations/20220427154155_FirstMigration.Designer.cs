// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using secondbeltexam.Models;

namespace secondbeltexam.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220427154155_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("secondbeltexam.Models.Enthusiast", b =>
                {
                    b.Property<int>("enthusiastid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("hobbyid")
                        .HasColumnType("int");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("enthusiastid");

                    b.HasIndex("hobbyid");

                    b.HasIndex("userid");

                    b.ToTable("Enthusiasts");
                });

            modelBuilder.Entity("secondbeltexam.Models.Hobby", b =>
                {
                    b.Property<int>("hobbyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("updatedat")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("userid")
                        .HasColumnType("int");

                    b.HasKey("hobbyid");

                    b.HasIndex("userid");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("secondbeltexam.Models.User", b =>
                {
                    b.Property<int>("userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("createdat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("updatedat")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.HasKey("userid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("secondbeltexam.Models.Enthusiast", b =>
                {
                    b.HasOne("secondbeltexam.Models.Hobby", "hobby")
                        .WithMany("Enthusiasts")
                        .HasForeignKey("hobbyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("secondbeltexam.Models.User", "user")
                        .WithMany("enthusiasts")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("secondbeltexam.Models.Hobby", b =>
                {
                    b.HasOne("secondbeltexam.Models.User", "user")
                        .WithMany("createdhobbies")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
